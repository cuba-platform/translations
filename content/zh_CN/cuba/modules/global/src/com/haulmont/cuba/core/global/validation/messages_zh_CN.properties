javax.validation.constraints.AssertTrue.message = 必须为真
org.hibernate.validator.constraints.ModCheck.message = $ {validatedValue}的校验位无效，$ {modType}校验和失败
org.hibernate.validator.constraints.Email.message = 不是一个格式正确的电子邮件地址
RequiredViewValidator.message = 实体不符合所需视图{value}
org.hibernate.validator.constraints.LuhnCheck.message = $ {validatedValue}的校验位无效，Luhn Modulo 10校验和失败
javax.validation.constraints.NotNull.message = 可能不为空
javax.validation.constraints.Past.message = 必须在过去
javax.validation.constraints.Future.message = 必须在将来
org.hibernate.validator.constraints.Mod11Check.message = $ {validatedValue}的校验位无效，模11校验和失败
org.hibernate.validator.constraints.NotBlank.message = 可能不是空的
org.hibernate.validator.constraints.EAN.message = {type}条形码无效
org.hibernate.validator.constraints.ParametersScriptAssert.message = 脚本表达式“{script}”没有评估为true
org.hibernate.validator.constraints.ScriptAssert.message = 脚本表达式“{script}”没有评估为true
javax.validation.constraints.Pattern.message = 必须匹配“{regexp}”
javax.validation.constraints.Max.message = 必须小于或等于{value}
org.hibernate.validator.constraints.Mod10Check.message = $ {validatedValue}的校验位无效，模10校验和失败
org.hibernate.validator.constraints.NotEmpty.message = 可能不是空的
javax.validation.constraints.Null.message = 必须为null
javax.validation.constraints.AssertFalse.message = 必须是假的
org.hibernate.validator.constraints.SafeHtml.message = 可能有不安全的HTML内容
javax.validation.constraints.Min.message = 必须大于或等于{value}
org.hibernate.validator.constraints.Length.message = 长度必须在{min}和{max}之间
org.hibernate.validator.constraints.CreditCardNumber.message = 无效的信用卡号码
javax.validation.constraints.DecimalMin.message = 必须大于$ {含
org.hibernate.validator.constraints.URL.message = 必须是有效的网址
javax.validation.constraints.Size.message = 大小必须在{min}和{max}之间
org.hibernate.validator.constraints.Range.message = 必须在{min}和{max}之间
javax.validation.constraints.DecimalMax.message = 必须小于$ {含
javax.validation.constraints.Digits.message = 数值超出范围（<{integer} digits>。<{fraction} digits> expected）