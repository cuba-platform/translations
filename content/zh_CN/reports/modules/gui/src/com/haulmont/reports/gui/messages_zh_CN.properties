<br/>=For example, <code>invalid('Incorrect parameter')</code> corresponds to the message sent in case of an invalid parameter for the report execution.
IDX_REPORT_GROUP_UNIQ_TITLE=使用相同名称的报表组已经存在
IDX_REPORT_REPORT_UNIQ_NAME=使用相同名称的报表已经存在
actions.Report=报表
actions.printAll=打印全部
actions.printSelected=打印选中
bandDefinitionEditor=区域编辑器
button.import=导入
button.run=执行
caption.category=分类
caption.preview=预览
chartEdit.series=系列
chartEdit.seriesEmptyMsg=请指定系列
chartEdit.seriesTypeNullMsg=请指定系列类型
chartEdit.seriesValueFieldNullMsg=请执行系列值字段
copy=拷贝
crossFieldValidationScriptHelp=这里可以设置一个Groovy脚本，用来在报表执行之前对报表参数进行交叉检查。<br/> <code>invalid (String str)</ code> 方法可以给用户发送关于验证的错误信息。<br/> 脚本应当检查参数之间的关联是否有意义，如果没有意义可以调 "invalid()" 方法。<br/><br/> 比如，<code>invalid('开始时间应该在结束时间之前')</code> 会在"Start date”参数发生在"End date”参数之后发出错误消息。<br/>以下变量传递到脚本中：<ul><li><code>params</code> - 外部报表参数映射</li><li><code>dataManager</code> - <code>DataManager</code> 类型的对象，提供CRUD功能。</li><li><code>metadata</code> - <code>Metadata</code> 类型的对象，提供访问应用程序元数据的功能。</li><li><code>security</code> - <code>Security</code> 类型的对象，用来检查用户访问不同系统对象的权限</li><li><code>userSession</code> - <code>UserSession</code> 类型的对象，关联当前认证用户</li><li><code>invalid</code> - groovy 闭包，如果在脚本内调用的话，能很有效的检测验证失败。<ul>
dataSet.cantFindCollectionProperty=找不到 %s 集合属性，父实体：%s
dataSet.dataStore=数据存储
dataSet.dataStoreMain=主存储
dataSet.editView=选择实体属性
dataSet.entitiesParamName=实体参数名称列表
dataSet.entityAliasInvalid=名称为 [%s] 的参数不正确
dataSet.entityAliasNull=参数为空
dataSet.entityParamName=实体参数名称
dataSet.entityWasChanged=实体有改动。现在您在编辑一个新实体的属性 %s
dataSet.jsonParameter=参数
dataSet.jsonPathQuery=JSON路径查询语句
dataSet.jsonPathQueryHelp=这里可以设置JSON路径查询语句用来查询JSON数。<p>示例：</p>有如下JSON结构，使用这个查询可以选择所有的书：<strong>$.store.book[*]</strong><br><code>{<br>&nbsp "store": {<br>&nbsp &nbsp "book": [<br>&nbsp &nbsp &nbsp {<br>&nbsp &nbsp &nbsp &nbsp "category": "reference",<br>&nbsp &nbsp &nbsp &nbsp "author": "Nigel Rees",<br>&nbsp &nbsp &nbsp &nbsp "title": "Sayings of the Century",<br>&nbsp &nbsp &nbsp &nbsp "price": 8.95<br>&nbsp &nbsp &nbsp },<br>&nbsp &nbsp &nbsp {<br>&nbsp &nbsp &nbsp &nbsp "category": "fiction",<br>&nbsp &nbsp &nbsp &nbsp "author": "Evelyn Waugh",<br>&nbsp &nbsp &nbsp &nbsp "title": "Sword of Honour",<br>&nbsp &nbsp &nbsp &nbsp "price": 12.99,<br>&nbsp &nbsp &nbsp &nbsp "isbn": "0-553-21311-3"<br>&nbsp &nbsp &nbsp }<br>&nbsp &nbsp ],<br>&nbsp &nbsp "bicycle": {<br>&nbsp &nbsp &nbsp "color": "red",<br>&nbsp &nbsp &nbsp "price": 19.95<br>&nbsp &nbsp }<br>&nbsp }<br>}<br></code><br>更多成熟的示例，请参考JSON路径文档。
dataSet.jsonPathQueryText=JSON路径查询语句必填
dataSet.jsonSourceGroovyCodeHelp=这里可以设置一个Groovy脚本，用来返回包含JSON的字符串。以下参数传入脚本：<ul><li><code>params</code> - 外部报表参数映射</li><li><code>parentBand</code> - 父区域，<code>BandData</code> 类型的对象</li><li><code>persistence</code> -<code>Persistence</code> 类型的对象，提供对数据存储的访问。</li><li><code>dataManager</code> - <code>DataManager</code> 类型的对象，提供CRUD功能。</li><li><code>metadata</code> - <code>Metadata</code> 类型的对象，提供访问应用程序元数据的功能。</li><li><code>security</code> - <code>Security</code> 类型的对象，用来检查用户访问不同系统对象的权限</li><li><code>userSession</code> - <code>UserSession</code> 类型的对象，关联当前认证用户</li><li><code>userSessionSource</code> - <code>UserSessionSource</code> 类型的对象，用来获取当前用户会话对象</li><li><code>timeSource</code> - <code>TimeSource</code> 类型的对象，用来获取当前时间</li><li><code>transactional</code> - 接收一个闭包作为参数的方法，这个闭包需要在新事务中作为参数执行。当前 <code>EntityManager</code> 作为闭包的参数用来处理事务</li><ul>
dataSet.jsonSourceType=JSON源
dataSet.linkParameterName=关联字段
dataSet.name=数据集名称
dataSet.processTemplate=预处理查询语句作为Groovy模板
dataSet.text=脚本
dataSet.textHelp=这里可以设置一个Groovy脚本，用来生产数据集。 以下参数传入脚本：<ul><li><code>params</code> -  外部报表参数映射</li><li><code>parentBand</code> -  父区域，<code>BandData</code> 类型的对象</li><li><code>Persistence</code> 类型的对象，提供对数据存储的访问。</li><li><code>dataManager</code> - <code>DataManager</code> 类型的对象，提供CRUD功能。</li><li><code>metadata</code> - <code>Metadata</code> 类型的对象，提供访问应用程序元数据的功能。</li><li><code>security</code> - <code>Security</code> 类型的对象，用来检查用户访问不同系统对象的权限</li><li><code>userSession</code> - <code>UserSession</code> 类型的对象，关联当前认证用户</li><li><code>userSessionSource</code> - <code>UserSessionSource</code> 类型的对象，用来获取当前用户会话对象</li><li><code>timeSource</code> - <code>TimeSource</code> 类型的对象，用来获取当前时间</li><li><code>transactional</code> - 接收一个闭包作为参数的方法，这个闭包需要在新事务中作为参数执行。当前 <code>EntityManager</code> 作为闭包的参数用来处理事务</li><ul>
dataSet.type=数据集类型
dataSet.urlJsonSource=URL
dataSet.urlJsonSourceMessage=URL必填
dataSet.useExistingView=使用已有视图
dataSet.viewName=视图名称
definition.name=区域名称
definition.orientation=方向
definition.parentBand=父区域
description.createBand=创建区域
description.createDataSet=创建数据集
description.createTemplate=创建模板
description.downloadTemplate=下载模板
description.editTemplate=编辑模板
description.moveDown=向下移动
description.moveUp=向上移动
description.removeBand=移除区域
description.removeDataSet=移除数据集
description.uploadTemplate=更新模板
error.bandNameNull=区域名未设置
error.bandNamesDuplicated=区域名重复 [%s]
error.bandOrientationNull=区域的 [%s] 方向未设置
error.dataSetNameNull=数据集名称未设置
error.dataSetScriptNull=数据集的 [%s] 脚本为空
error.dataSetTypeNull=数据集的 [%s] 类型未设置
error.jsonDataSetScriptNull=JSON数据集的 [%s] 脚本为空
error.rootBandNull=根区域未设置
export=导出
fileUploadDialog.caption=正在发送文件
formatStringMsg=格式字符串未指定
formatsEdit=格式化工具
generalFrame.createBandDefinition=创建区域
generalFrame.down=下
generalFrame.removeBandDefinition=移除区域
generalFrame.up=上
generalTab=报表结构
groupLocaleCaption=本地化
groupProperties=分组
inputOutputTypesError=模板类型和输出类型不匹配
inputParameters=输入实体参数
localeCaption=本地化名称
localeText=本地化
localesTab=本地化
menu-config.report$Report.browse=报表
menu-config.report$Report.run=运行报表
menu-config.report$ReportGroup.browse=报表分组
menu-config.report$showChart=显示图表
menu-config.report$showPivotTable=显示透视表
menu-config.report$showReportTable=显示表格
menu-config.reports=报表
notification.defaultTemplateIsEmpty=默认模板未指定
notification.fileIsNotAllowedForChart=无法为图表保存模板
notification.selectReport=请选择报表
notifications.confirmPrintAll=确认是否要打印所有数据？
notifications.confirmPrintAllheader=确认
notifications.confirmPrintSelected=报表要使用什么数据？
notifications.confirmPrintSelectedheader=选择
notifications.noSelectedEntity=未选择数据
parameter.localeTextHelp=这里可以为不同地区定义不同参数名称。为了做到这个<br/>需要成对输入地区名称：<code>locale_name = report_name</code>。<br/><br/> 示例：<br/><code>en = Book</code><br/><code>ru = Книга</code>
parameter.transformationScriptHelp=可以在报表使用之前对参数应用一个Groovy脚本。<br/>Groovy脚本应当返回新参数值。当前参数值可以在脚本<br/>中通过 <code>paramValue</code> 获得，参数映射使用<code>params</code>别名。<br/><br/>示例：<br/><code>return "%" + paramValue + "%"</code>
parameterEditor=参数编辑器
parameters.alias=参数别名
parameters.aliasMsg=参数别名未指定
parameters.caption=标题
parameters.crossFieldValidate=验证
parameters.defaultDateIsCurrent=默认日期（时间）\n 是用当前日期时间
parameters.defaultValue=默认值
parameters.enum=枚举
parameters.groovyScript=Groovy脚本
parameters.hidden=隐藏
parameters.localesTab=本地化
parameters.metaClass=实体
parameters.nameMsg=参数名称未指定
parameters.optionsTab=属性
parameters.predefinedTransformation=预定义转换
parameters.required=必填参数？
parameters.requiredEnumClass=参数枚举未指定
parameters.requiredMetaClass=参数实体未指定
parameters.screen=实体选择界面
parameters.transformationTab=转换
parameters.type=参数类型
parameters.typeMsg=参数类型未指定
parameters.validateFields=验证
parameters.validationTab=验证
parameters.wildcards=通配符
parametersAndFormatsTab=参数和格式
pivotTable.aggregationFunctionHelp=可使用JavaScript函数作为自定义的聚合函数。<br/>此函数应在透视表中每个单元格进行调用<br/>并返回带有以下键值的对象：<ul><li><code>push</code> - 以记录作为输入参数的函数，每条记录调用一次</li><li><code>value</code> - 返回单元格存储值的函数</li><li><code>format</code> - 接收字符串输入并返回其格式化结果的函数</li></ul>这里有个聚合函数的示例 <code>count</code> 返回跟单元格匹配的记录<br/><br/><code>function(data, rowKey, colKey) {<br/>&nbsp &nbsp return {<br/>&nbsp &nbsp &nbsp &nbsp count: 0,<br/>&nbsp &nbsp &nbsp &nbsp push: function(record) { this.count++; },<br/>&nbsp &nbsp &nbsp &nbsp value: function() { return this.count; },<br/>&nbsp &nbsp &nbsp &nbsp format: function(x) { return x; },<br/>&nbsp &nbsp};<br/>}</code>
pivotTable.aggregationOptions=聚合选项
pivotTable.customC3properties=自定义C3参数
pivotTable.customFunctions=自定义函数
pivotTable.customHeatmapProperties=自定义热力图属性
pivotTable.customOptions=自定义选项
pivotTable.defaultAggregation=默认聚合
pivotTable.functionHelpCaption=脚本
pivotTable.propertiesOptions=参数选项
pivotTable.propertyFunctionHelp=JavaScript 函数可以用来为透视表添加从现有属性派生的新属性。<br/>这样可以使得数据更容易做透视观察。<br/>方法输入是已有的记录，返回的是新属性的值。<br/><br/>这里有一个非常简单的示例，使用已有的<code>Age</code> 属性返回其所处年代：<br/><br/><code>function(record) {<br/>&nbsp &nbsp return record.Age - record.Age % 10;<br/>}</code>
pivotTable.rendererOptions=渲染器选项
pivotTableAggregationEditor=聚合选项编辑器
pivotTableEdit.aggregationPropertiesRequired=请指定聚合属性
pivotTableEdit.aggregationsRequired=请指定聚合
pivotTableEdit.bandRequired=区域必填
pivotTableEdit.columnsOrRowsRequired=请指定列或者行
pivotTableEdit.propertiesRequired=请指定属性
pivotTableEdit.propertyIntersection=属性不能相交
pivotTableEdit.rendererRequired=请指定默认渲染器
pivotTableEdit.uniqueAggregationOptionCaption=聚合选项标题必须唯一
pivotTablePropertyEditor=属性选项编辑器
report.bandDetails=区域详情
report.bands=报表区域
report.crossParametersValidation=参数交叉验证
report.defaultTemplate=设置默认
report.localeTextHelp=这里可以本地化报表名称 - 在报表列表中以不同用户的语言显示名称<br/> 单独的行内成对输入区域名称： <code>locale_name = report_name</code><br/><br/> 示例：<br/><code>en = Books by author</code><br/><code>ru = Книги по автору</code>
report.nameMsg=报表名称未指定
report.new=新建
report.parameters=参数
report.reportClearButton=清除
report.reportFilterButton=搜索
report.reportRunFilterCode=代码
report.reportRunFilterGroup=分组
report.reportRunFilterName=名称
report.reportRunFilterUpdatedDate=更新时间
report.reportTypeMsg=报表类型未指定
report.templateMsg=默认模板未指定
report.templates=模板
report.validationScriptOff=验证脚本
report.validationScriptOn=验证脚本启用
report.valuesFormats=值格式
report.wizard=使用向导
reportBrowser=报表
reportEditor=报表编辑器
reportEditor.format=编辑报表 "%s"
reportException.failedConnectToOffice=未找到LibreOffice实例
reportException.message=生成报表时产生错误
reportException.noFile=文件未上传
reportException.noOpenOfficeFreePorts=不能连接到LibreOffice实例。没有可用的端口。
reportException.unableToImportReport=不能导入报表
reportException.wrongFileType=错误的文件类型：%s。期望是ZIP。
reportGroupBrowser=报表分组
reportGroupEditor=报表组
roles.addRole=添加角色
roles.removeRole=移除角色
roles.roleName=角色名称
runReport=运行
runReportBackgroundMessage=报表文档生成中，请等待
runReportBackgroundTitle=正在运行报表
screens.createScreen=添加界面
screens.removeScreen=移除界面
screens.screenId=界面ID
scriptEditor=编辑器
securityFrame.roles=角色
securityFrame.screens=界面
securityTab=角色和界面
template.alterable=可变
template.code=模板代码
template.codeMsg=请指定模板代码
template.copyNamingPattern=%s 复制
template.customDefinedBy=定义人
template.customDefinition=定义定制化
template.file=模板文件
template.isAlterableOutput=是否可变输出
template.isCustom=是否自定义
template.outputNamePattern=输出名称模式
template.outputType=输出类型
template.outputTypeMsg=请指定输出类型
template.uploadTemplate=请上传模板文件
templateEditor=模板编辑器
templateEditor.HighlightActiveLine=高亮活跃行
templateEditor.PrintMargin=打印边距
templateEditor.ShowGutter=显示边槽
templateEditor.classRequired=请指定定制化的定义
templateEditor.clearTemplateMessage=模板文字会在保存时删除
templateEditor.customDefinedBy=请指定定制化定义类型
templateEditor.uploadSuccess=文件已上传
templateEditor.uploadUnsuccess=文件未上传
templateEditor.warning=警告
templatesTab=模板
transformationScript=转换
unableToDeleteNotEmptyReportGroup=不能删除带有报表的分组
unableToDeleteSystemReportGroup=不能删除系统报表分组
unableToSaveTemplateWhichDefinedWithClass=不能保存采用类定义的模板
validationScript=验证脚本
validationScriptHelp=这里可以设置一个Groovy脚本，用来检查报表参数值。<br/> <code>invalid (String str)</ code> 方法可以给用户发送关于验证的错误信息。<br/> 脚本应当检查参数值，如果参数值无效则调用 "invalid()" 方法。<br/><br/> 比如，<code>invalid('参数错误')</code> 会在报表执行时有无效参数的时候发出错误消息。<br/>以下变量传递到脚本中：<ul><li><code>value</code> - 用户输入的参数值</li><li><code>dataManager</code> - <code>DataManager</code> 类型的对象，提供CRUD功能。</li><li><code>metadata</code> - <code>Metadata</code> 类型的对象，提供访问应用程序元数据的功能。</li><li><code>security</code> - <code>Security</code> 类型的对象，用来检查用户访问不同系统对象的权限</li><li><code>userSession</code> - <code>UserSession</code> 类型的对象，关联当前认证用户</li><li><code>invalid</code> - groovy 闭包，如果在脚本内调用的话，能很有效的检测验证失败。<ul>
valueNameMsg=值名称没指定
valuesFormats.format=格式字符串
valuesFormats.name=值名称
com.haulmont.reports.gui.report.importdialog/importResult=导入成功完成。创建报表 %s，更新 %s
com.haulmont.reports.gui.report.importdialog/importRoles=导入角色
com.haulmont.reports.gui.report.importdialog/reportImportDialog.caption=导入报表
com.haulmont.reports.gui.report.importdialog/uploadDescription=选择文件或者拖动到这里
com.haulmont.reports.gui.report.run/caption.reportForChart=带图表的报表
com.haulmont.reports.gui.report.run/caption.reportForPivotTable=透视表的报表
com.haulmont.reports.gui.report.run/caption.reportForTable=带表格的报表
com.haulmont.reports.gui.report.run/caption.reportOutputType=输出类型
com.haulmont.reports.gui.report.run/caption.reportParameters=报表参数
com.haulmont.reports.gui.report.run/caption.reportTemplate=模板
com.haulmont.reports.gui.report.run/error.paramIsRequiredButEmpty=填写参数 "%s"
com.haulmont.reports.gui.report.run/input.printReport=运行报表
com.haulmont.reports.gui.report.run/input.requiredParametersNotSet=必要参数未定义
com.haulmont.reports.gui.report.run/inputParameters=输入参数
com.haulmont.reports.gui.report.run/name=名称
com.haulmont.reports.gui.report.run/reportBrowser=运行报表
com.haulmont.reports.gui.report.run/runReport=运行
com.haulmont.reports.gui.report.run/showChart.caption=报表图表
com.haulmont.reports.gui.report.run/showPivotTable.caption=透视表
com.haulmont.reports.gui.report.run/showReportTable.caption=显示报表表格
com.haulmont.reports.gui.report.validators/fillCorrectOutputFileNameMsg=请输入正确的文件扩展名 "%s"
com.haulmont.reports.gui.report.validators/incorrectBandName=区域名称只能包含字母，数字和下划线
com.haulmont.reports.gui.report.validators/incorrectInputData=参数 "%s" 无效
com.haulmont.reports.gui.report.validators/incorrectParamAlias=别名只能包含字母，数字和下划线
com.haulmont.reports.gui.report.validators/notOnlyUnderscore=别名不能只是下划线
com.haulmont.reports.gui.report.wizard/add=添加
com.haulmont.reports.gui.report.wizard/addPropertiesAndTableAreas=为报表添加简单或者表格
com.haulmont.reports.gui.report.wizard/addRegion=添加区域
com.haulmont.reports.gui.report.wizard/addRegionsWarn=至少为报表添加一个区域
com.haulmont.reports.gui.report.wizard/attributes=属性
com.haulmont.reports.gui.report.wizard/backward=后退
com.haulmont.reports.gui.report.wizard/cancel=取消
com.haulmont.reports.gui.report.wizard/changeQuery=修改查询语句
com.haulmont.reports.gui.report.wizard/confirmSaveWithoutRegions=报表没有任何区域。确认保存？
com.haulmont.reports.gui.report.wizard/defaultQueryHasBeenSet=设置了未带条件的查询语句（选择所有实体）
com.haulmont.reports.gui.report.wizard/deleteRegion=删除区域 %s?
com.haulmont.reports.gui.report.wizard/diagramType=图表类型
com.haulmont.reports.gui.report.wizard/downloadOutputFileNamePattern="%s".%s 实体的报表
com.haulmont.reports.gui.report.wizard/downloadTemplateFile=模板
com.haulmont.reports.gui.report.wizard/downloadTemplateFileNamePattern=报表 "%s".%s 的模板
com.haulmont.reports.gui.report.wizard/elementsAlreadyAdded=属性已添加
com.haulmont.reports.gui.report.wizard/elementsWasNotAdded=属性未添加...
com.haulmont.reports.gui.report.wizard/enterMainParameters=输入主参数
com.haulmont.reports.gui.report.wizard/entity=实体
com.haulmont.reports.gui.report.wizard/entityHintMsg=报表接收的对象类型
com.haulmont.reports.gui.report.wizard/fillEntityMsg=请选择 "实体"
com.haulmont.reports.gui.report.wizard/fillReportNameMsg=请输入 "报表名称"
com.haulmont.reports.gui.report.wizard/fillReportQuery=请设置报表查询语句
com.haulmont.reports.gui.report.wizard/fillTemplateTypeMsg=请选择 "模板文件格式"
com.haulmont.reports.gui.report.wizard/finishPrepareReport=完成后可在"报表"界面看到此报表
com.haulmont.reports.gui.report.wizard/forward=下一步
com.haulmont.reports.gui.report.wizard/interruptConfirm=确定要中断并放弃未保存的更改？
com.haulmont.reports.gui.report.wizard/listOfEntitiesReport=实体列表报表
com.haulmont.reports.gui.report.wizard/listOfEntitiesReportWithQuery=查询语句选择实体列表报表
com.haulmont.reports.gui.report.wizard/multiEntityDataSetViewEditor=为数据集选择属性
com.haulmont.reports.gui.report.wizard/outputFileFormat=报表输出类型
com.haulmont.reports.gui.report.wizard/outputFileName=输出名称模式
com.haulmont.reports.gui.report.wizard/outputFileNameHintMsg=报表生成的文件默认名称
com.haulmont.reports.gui.report.wizard/outputFileTypeHintMsg=报表生成文件的类型
com.haulmont.reports.gui.report.wizard/properties=已选属性
com.haulmont.reports.gui.report.wizard/region=区域
com.haulmont.reports.gui.report.wizard/regionEditor=为报表区域选择属性
com.haulmont.reports.gui.report.wizard/regionTabulatedMessage=报表表示带有选择属性的 "%s" 实体列表
com.haulmont.reports.gui.report.wizard/regionsClearConfirm=报表区域将被清除。继续？
com.haulmont.reports.gui.report.wizard/reportBuildType=报表类型
com.haulmont.reports.gui.report.wizard/reportDetails=报表创建
com.haulmont.reports.gui.report.wizard/reportName=报表名称
com.haulmont.reports.gui.report.wizard/reportNameChanged=报表名称已更改
com.haulmont.reports.gui.report.wizard/reportNamePattern=实体 "%s" 的报表
com.haulmont.reports.gui.report.wizard/reportRegions=报表创建
com.haulmont.reports.gui.report.wizard/reportRegionsColumn=报表区域
com.haulmont.reports.gui.report.wizard/runReport=运行
com.haulmont.reports.gui.report.wizard/save=保存
com.haulmont.reports.gui.report.wizard/saveReport=保存报表
com.haulmont.reports.gui.report.wizard/selectAtLeastOneProp=在右边面板添加属性以继续
com.haulmont.reports.gui.report.wizard/selectEntityProperties=选择 "%s" 属性包含在报表内。<br>对于图表和表格，第一个属性的值会被用作标题，<br>其他属性用来作为数据。
com.haulmont.reports.gui.report.wizard/selectEntityPropertiesForTableArea=选择 "%s" 属性包含在表格区域。<br>对于图表和表格，第一个属性的值会被用作标题，<br>其他属性用来作为数据。
com.haulmont.reports.gui.report.wizard/selectItemForContinue=选择一个条目继续
com.haulmont.reports.gui.report.wizard/selectNotARoot=选择子条目继续
com.haulmont.reports.gui.report.wizard/selectPropertyFromEntity=从关联实体选择属性
com.haulmont.reports.gui.report.wizard/setQuery=设置查询语句
com.haulmont.reports.gui.report.wizard/simpleRegion=添加简单区域
com.haulmont.reports.gui.report.wizard/simpleRegionEditor=为简单报表区域选择属性
com.haulmont.reports.gui.report.wizard/singleEntityDataSetViewEditor=为数据集选择属性
com.haulmont.reports.gui.report.wizard/singleEntityReport=单一实体报表
com.haulmont.reports.gui.report.wizard/singleMultiEntityHintMsg=<b>单一实体报表</b><br/>可以从实体编辑界面或者实体浏览界面选择一个实体打印实体报表。<br/><b>实体列表报表</b><br/>可以从实体浏览界面选择一组实体打印实体列表报表。<br/><b>查询语句选择实体列表报表</b><br/>能打印预定义查询语句选中的所有实体。
com.haulmont.reports.gui.report.wizard/stepNo=（第 %d/%d 步）
com.haulmont.reports.gui.report.wizard/tabulatedLookup=为表格报表区域选择属性
com.haulmont.reports.gui.report.wizard/tabulatedRegion=添加表格区域
com.haulmont.reports.gui.report.wizard/tabulatedRegionEditor=为表格报表区域选择属性
com.haulmont.reports.gui.report.wizard/templateFileFormat=模板类型
com.haulmont.reports.gui.report.wizard/templateGenerationException=生成模板出错
com.haulmont.reports.gui.report.wizard/templateHintMsg=连接到自动生成的报表模板
com.haulmont.reports.gui.report.wizard/templateTypeHintMsg=报表模板类型
com.haulmont.reports.gui.report.wizard/valueNotFound=无查询结果