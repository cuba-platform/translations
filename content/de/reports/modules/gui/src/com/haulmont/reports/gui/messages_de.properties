<br/> = Beispielsweise entspricht <code>invalid('Incorrect parameter')</code> der Nachricht, die im Falle eines ungültigen Parameters für die Berichtsausführung gesendet wird.
IDX_REPORT_GROUP_UNIQ_TITLE = Es existiert bereits eine gleichnamige Berichtsgruppe.
IDX_REPORT_REPORT_UNIQ_NAME = Es existiert bereits ein gleichnamiger Bericht.
actions.Report = Bericht
actions.printAll = Alle drucken
actions.printSelected = Ausgewählte drucken
bandDefinitionEditor = Band bearbeiten
button.import = Importieren
button.run = Ausführen
caption.category = Kategorie
caption.preview = Vorschau
chartEdit.invalidJson = Ungültige JSON Konfiguration
chartEdit.jsonConfig = JSON Konfiguration
chartEdit.pieJsonConfigHelp = Hier können Sie eine zusätzliche JSON-Konfiguration für ein Kreisdiagramm festlegen.<br/>Zum Beispiel:</br><code>{<br/>&nbsp &nbsp "theme": "dark",<br/>&nbsp &nbsp "backgroundAlpha": 1,<br/>&nbsp &nbsp "backgroundColor": "black",<br/>&nbsp &nbsp "depth3D": 20,<br/>&nbsp &nbsp "angle": 40,<br/>&nbsp &nbsp "colors": [<br/>&nbsp &nbsp &nbsp &nbsp "#0dffdc",<br/>&nbsp &nbsp &nbsp &nbsp "#00c6eb",<br/>&nbsp &nbsp &nbsp &nbsp "#0091ff",<br/>&nbsp &nbsp &nbsp &nbsp "#0c4ae8",<br/>&nbsp &nbsp &nbsp &nbsp "#1111fa"<br/>&nbsp &nbsp ]<br/>}</code></br>Beachten Sie, dass diese Konfiguration die automatisch durch Berichte-API generierte Konfiguration überschreiben kann.
chartEdit.serialJsonConfigHelp = Hier können Sie eine zusätzliche JSON-Konfiguration für ein serielles Diagram festlegen.<br/>Zum Beispiel:</br><code>{<br/>&nbsp &nbsp "theme": "dark",<br/>&nbsp &nbsp "backgroundAlpha": 1,<br/>&nbsp &nbsp "backgroundColor": "black",<br/>&nbsp &nbsp "startDuration": 1,<br/>&nbsp &nbsp "depth3D": 20,<br/>&nbsp &nbsp "angle": 30,<br/>&nbsp &nbsp "graphs": [{<br/>&nbsp &nbsp &nbsp &nbsp "fillAlphas": 1,<br/>&nbsp &nbsp &nbsp &nbsp "lineAlpha": 1,<br/>&nbsp &nbsp &nbsp &nbsp "fillColors": ["#f12711", "#f5af19"],<br/>&nbsp &nbsp &nbsp &nbsp "lineColor": "black",<br/>&nbsp &nbsp &nbsp &nbsp "balloonColor": "#f12711"<br/>&nbsp &nbsp }]<br/>}</code></br>Beachten Sie, dass diese Konfiguration die automatisch durch Berichte-API generierte Konfiguration überschreiben kann.
chartEdit.series = Reihe
chartEdit.seriesEmptyMsg = Bitte Serie angeben
chartEdit.seriesTypeNullMsg = Bitte Serie angeben
chartEdit.seriesValueFieldNullMsg = Bitte geben Sie das Feld für die Serie an
copy = Kopieren
crossFieldValidationScriptHelp = Hier können Sie ein Groovy-Skript definieren, das die Berichtsparameter vor der Ausführung des Berichts überprüft.<br/> Die Methode <code>invalid (String str)</code> kann verwendet werden, um Nachrichten über die Fehler bei der Berichtsvalidierung an den Benutzer zu senden.<br/>Das Skript sollte prüfen, ob Parameterwerte in Relation zueinander sinnvoll sind und die Methode "invalid()" aufrufen, wenn sie dies nicht tun.<br/><br/>Beispielsweise, wenn der Parameter "Startdatum" nach dem Parameter "Enddatum" liegt, erfolgt: <code>invalid('Startdatum muss vor dem Enddatum liegen')</code>.<br/>Die folgenden Variablen werden an das Skript übergeben:<ul><li><code><code>params</code> - externe Reportparameter map</li><li><code>dataManager</code> - ein Objekt des Typs <code>DataManager</code>, der die CRUD-Funktionalität bietet</li><li><code>metadata</code> - - ein Objekt vom Typ <Code>Metadata</code>, das den Zugriff auf die Metadaten der Anwendung ermöglicht</li><li><Code><Sicherheit</code> - - ein Objekt des Typs <code>Sicherheit</code>, mit dem die Zugriffsrechte des Benutzers auf verschiedene <br>Objekte im System überprüft werden können</li><li><code>userSession</code> - ein Objekt des Typs <code>UserSession</code>, das mit dem aktuell <br>authentifizierten Benutzer</li><li><code><code>invalid</code> - groovy Closure, welches fehlschlägt, wenn es von innerhalb des Skripts aufgerufen wird<ul>.
dataSet.cantFindCollectionProperty = Listeneigenschaft %s für Entität %s nicht gefunden
dataSet.dataStore = Datenspeicher
dataSet.dataStoreMain = Haupt
dataSet.editView = Entitätsattribute auswählen
dataSet.entitiesParamName = Liste von Entitäts-Parameternamen
dataSet.entityAliasInvalid = Parameter mit Namen [%s] nicht korrekt
dataSet.entityAliasNull = Parameter ist leer
dataSet.entityParamName = Entitäts-Parametername
dataSet.entityWasChanged = Entität wurde bearbeitet. Sie bearbeiten jetzt verfügbare Felder für eine neue Entität %s
dataSet.fullScreen = Vollbild
dataSet.jsonParameter = Parameter
dataSet.jsonPathQuery = JsonPath-Abfrage
dataSet.jsonPathQueryHelp = Hier können Sie die JsonPath-Abfrage so festlegen, dass sie den JSON-Baum abfragt..<p>Beispiel:</p>Mit folgender JSON-Struktur können wir alle Bücher mit der Abfrage auswählen <strong>$.store.book[*]</strong><br><code>{<br>&nbsp "store": {<br>&nbsp &nbsp "book": [<br>&nbsp &nbsp &nbsp {<br>&nbsp &nbsp &nbsp &nbsp "category": "reference",<br>&nbsp &nbsp &nbsp &nbsp "author": "Nigel Rees",<br>&nbsp &nbsp &nbsp &nbsp "title": "Sayings of the Century",<br>&nbsp &nbsp &nbsp &nbsp "price": 8.95<br>&nbsp &nbsp &nbsp },<br>&nbsp &nbsp &nbsp {<br>&nbsp &nbsp &nbsp &nbsp "category": "fiction",<br>&nbsp &nbsp &nbsp &nbsp "author": "Evelyn Waugh",<br>&nbsp &nbsp &nbsp &nbsp "title": "Sword of Honour",<br>&nbsp &nbsp &nbsp &nbsp "price": 12.99,<br>&nbsp &nbsp &nbsp &nbsp "isbn": "0-553-21311-3"<br>&nbsp &nbsp &nbsp }<br>&nbsp &nbsp ],<br>&nbsp &nbsp "bicycle": {<br>&nbsp &nbsp &nbsp "color": "red",<br>&nbsp &nbsp &nbsp "price": 19.95<br>&nbsp &nbsp }<br>&nbsp }<br>}<br></code><br>Ausführlichere Beispiele finden Sie in der JsonPath-Dokumentation.
dataSet.jsonPathQueryText = JsonPath-Abfrage ist erforderlich
dataSet.jsonSourceGroovyCodeHelp = Hier können Sie ein Groovy-Skript einstellen, ein Json-String zurückgibt. Die folgenden Variablen werden an das Skript übergeben:<ul><li><code>params</code> - externe Berichtsparameter map</li><li><code>parentBand</code> - Elternband als Objekt des <code>BandData</code> type</li><li><code>persistenz</code> - ein Objekt vom Typ <Code>Persistence</code>, das den Zugriff auf die Datenspeicherung ermöglicht</li><li><Code>dataManager</code> - - ein Objekt des Typs <code>DataManager</code>, der die CRUD-Funktionalität bereitstellt</li><li><code>metadata</code> - ein Objekt des Typs <code>Metadata</code>, das den Zugriff auf die Anwendungsmetadaten</li><li><code>security</code> - - ermöglicht. ein Objekt des Typs <code>Sicherheit</code>, der verwendet wird, um die Zugriffsrechte des Benutzers auf verschiedene <br>Objekte im System zu überprüfen</li><li><code>userSession</code> - ein Objekt des Typs <code>UserSession</code>, der dem aktuell <br>authentifizierten Benutzer</li><li><code>userSessionSource</code> - - zugeordnet ist. ein Objekt des Typs <Code>UserSessionSource</code>, das verwendet wird, um </br>current user session object</li><li><code>timeSource</code> - ein Objekt des Typs <Code>TimeSource</code>, das verwendet wird, um die aktuelle Zeit</li><li><Code>transactional</code> - eine Methode, die einen Closure-Parameter beinhaltet, der in einer neuen Transaktion ausgeführt werden sollte. Der aktuelle <Code>EntityManager</code> wird zum Closure-Parameter</li><ul>
dataSet.jsonSourceType = Json-Quelle
dataSet.linkParameterName = Link Feld
dataSet.name = Name
dataSet.processTemplate = Abfrage als Groovy-Template verarbeiten
dataSet.text = Skript
dataSet.textHelp = Hier können Sie ein Groovy-Skript einstellen, das einen Datensatz erzeugt. Die folgenden Variablen werden an das Skript übergeben:<ul><li><code><code>params</code> - externe Berichtsparameter map</li><li><code>parentBand</code> - Elternband als Objekt des <code>BandData</code> type</li><li><code><code>persistenz</code> - ein Objekt vom Typ <Code>Persistence</code>, das den Zugriff auf die Datenspeicherung ermöglicht</li><li><Code>dataManager</code> - ein Objekt des Typs <code>DataManager</code>, der die CRUD-Funktionalität bereitstellt</li><li><code>metadata</code> - ein Objekt des Typs <code>Metadata</code>, das den Zugriff auf die Anwendungsmetadaten ermöglicht. </li><li><code>security</code>. ein Objekt des Typs <code>Sicherheit</code>, das verwendet wird, um die Zugriffsrechte des Benutzers auf verschiedene <br>Objekte im System zu überprüfen</li><li><code>userSession</code> - ein Objekt des Typs <code>UserSession</code>, der dem aktuell <br>authentifizierten Benutzer</li><li><code>userSessionSource</code> - zugeordnet ist. ein Objekt des Typs <Code>UserSessionSource</code>, welches das current user session object beinhaltet </li><li><code>timeSource</code> - ein Objekt des Typs <Code>TimeSource</code>, das verwendet wird, um die aktuelle Zeit zu ermitteln</li><li><Code>transactional</code> - eine Methode, die einen Closure beinhaltet, die in einer neuen Transaktion ausgeführt werden soll,<br>als Closure-Parameter. Der aktuelle <Code>EntityManager</code> als Closure-Parameter</li><ul>
dataSet.type = Typ
dataSet.urlJsonSource = URL
dataSet.urlJsonSourceMessage = URL ist erforderlich
dataSet.useExistingView = existierenden View verwenden
dataSet.viewName = View Name
definition.name = Bandname
definition.orientation = Ausrichtung
definition.parentBand = Übergeordnetes Band
description.createBand = Band anlegen
description.createDataSet = Datensatzmenge anlegen
description.createTemplate = Vorlage anlegen
description.downloadTemplate = Vorlage herunterladen
description.editTemplate = Vorlage bearbeiten
description.moveDown = Runter
description.moveUp = Hoch
description.removeBand = Band löschen
description.removeDataSet = Datensätze entfernen
description.uploadTemplate = Vorlage hochladen
error.bandNameNull = Bandname nicht angegeben
error.bandNamesDuplicated = Bandname existiert bereits [%s]
error.bandOrientationNull = Ausrichtung für Band [%s] nicht angegeben
error.dataSetNameNull = Datensatzmengenname nicht angegeben
error.dataSetScriptNull = Skript für Datensatzmenge [%s] nicht angegeben
error.dataSetTypeNull = Typ der Datensatzmenge [%s] nicht angegeben
error.jsonDataSetScriptNull = Json-Datensatz [%s] Skript ist leer.
error.rootBandNull = Haupt Band nicht gesetzt
export = Exportieren
fileUploadDialog.caption = Datei senden
formatStringMsg = Format String wurde nicht angegeben
formatsEdit = Formatierer
generalFrame.createBandDefinition = Band anlegen
generalFrame.down = Runter
generalFrame.removeBandDefinition = Band löschen
generalFrame.up = Hoch
generalTab = Berichtsstruktur
groovyScriptMsg = Groovy Skript ist nicht definiert
groupLocaleCaption = Lokalisierung
groupProperties = Gruppe
inputOutputTypesError = Vorlagetyp und Ausgabetyp nicht kompatibel
inputParameters = Entitätsparameter eingeben
localeCaption = Lokalisierer Name
localeText = Lokalisierung
localesTab = Lokalisierung
menu-config.report$Report.browse = Berichte
menu-config.report$Report.run = Berichte ausführen
menu-config.report$ReportGroup.browse = Berichtsgruppen
menu-config.report$showChart = Diagramme anzeigen
menu-config.report$showPivotTable = Pivot-Tabellen anzeigen
menu-config.report$showReportTable=Berichtstabelle anzeigen
menu-config.reports = Berichte
notification.defaultTemplateIsEmpty = Standard Dateiname nicht angegeben
notification.fileIsNotAllowedForSpecificTypes = Template-Datei für die Grafik/Tabelle/Pivot-Tabelle kann nicht gespeichert werden
notification.selectReport = Bitte Bericht auswählen
notifications.confirmPrintAll = Sollen wirklich alle Einträge gedruckt werden?
notifications.confirmPrintAllheader = Bestätigung
notifications.confirmPrintSelected = Welche Daten sollen für den Bericht verwendet werden?
notifications.confirmPrintSelectedheader = Auswählen
notifications.noSelectedEntity = Keine Daten ausgewählt
parameter.localeTextHelp = Hier können Sie den Parameternamen für verschiedene Gebietsschemas definieren. Dazu müssen Sie die Paare <code>locale_name = report_name</code> eingeben.<br/><br/>Zum Beispiel:<br/><code>de = Buch</code><br/><code>ru = Книга</code>
parameter.transformationScriptHelp = Ermöglicht Ihnen, ein Groovy-Skript auf den Parameter anzuwenden, bevor Sie es im Bericht <br/> verwenden. Ein Groovy-Skript sollte einen neuen Parameterwert zurückgeben. Der aktuelle Parameterwert ist im Skript über den <code>paramValue</code> verfügbar. Die Parameterzuordnung ist über den Alias <code>params</code> verfügbar.<br/><br/> Zum Beispiel:<br/><code> gibt "%" + paramValue + "%"</code>zurück
parameterEditor = Parameter bearbeiten
parameters.alias = Parameter alias
parameters.aliasMsg = Parameter alias nicht angegeben
parameters.caption = Überschrift
parameters.crossFieldValidate = Validieren
parameters.defaultDateIsCurrent = Standarddatum (Uhrzeit) ist aktuell
parameters.defaultValue = Standardwert
parameters.enum = Aufzählung
parameters.groovyScript = Groovy-Skript
parameters.hidden = Versteckt
parameters.localesTab = Lokalisierung
parameters.metaClass = Entität
parameters.nameMsg = Parametername nicht angegeben
parameters.optionsTab = Eigenschaften
parameters.predefinedTransformation = Vordefinierte Transformation
parameters.required = Benötigter Parameter?
parameters.requiredEnumClass = Parameter Aufzählung nicht angegeben
parameters.requiredMetaClass = Parameter Entität nicht angegeben
parameters.screen = Entitäts-Auswahlmaske
parameters.transformationTab = Transformation
parameters.type = Parametertyp
parameters.typeMsg = Parametertyp nicht angegeben
parameters.validateFields = Validieren
parameters.validationTab = Validierung
parameters.wildcards = Wildcards
parametersAndFormatsTab = Parameter und Formate
pivotTable.aggregationFunctionHelp = Die JavaScript-Funktion kann als eigene Aggregationsfunktion verwendet werden.<br/>Es sollte eine Funktion sein, die einmal pro Zelle in der Pivot-Tabelle aufgerufen wird und ein Objekt mit den folgenden Schlüsseln zurückgibt:<ul><li><code>push</code> - eine Funktion, die einen Datensatz von der Eingabe übernimmt, wird diese Funktion einmal pro Datensatz </li><li><code>value</code> - eine Funktion, die den Wert zurückgibt Wert, der in der Zelle gespeichert werden soll </li><li><code>format</code> - eine Funktion, die einen Wert übernimmt und seine formatierte Zeichenfolge zurückgibt <br/>Darstellung</li></ul> Hier ist ein Beispiel-Aggregator <code>count</code>, der nur die Anzahl der Datensätze zurückgibt, die mit der Zelle übereinstimmen:<br/><br/><code>-Funktion (data, rowKey, colKey) {<br/>&nbsp &nbsp return {<br/>&nbsp &nbsp &nbsp &nbsp Anzahl: 0,<br/>&nbsp &nbsp &nbsp &nbsp & nbsp & nbsp & nbsp & nbsp & nbsp drücken: Funktion (Datensatz) { this.count++; },<br/>&nbsp &nbsp &nbsp &nbsp wert: function() {return this.count; },<br/>&nbsp &nbsp &nbsp &nbsp Format: function(x) {return x; },<br/>&nbsp &nbsp};<br/>}</code>
pivotTable.aggregationOptions = Aggregationsoptionen
pivotTable.customC3properties = Benutzerdefinierte C3-Eigenschaften
pivotTable.customFunctions = Benutzerdefinierte Funktionen
pivotTable.customHeatmapProperties = Benutzerdefinierte Heatmap-Eigenschaften
pivotTable.customOptions = Benutzerdefinierte Optionen
pivotTable.defaultAggregation = Standardaggregation
pivotTable.functionHelpCaption = Skript
pivotTable.propertiesOptions = Eigenschaftenoptionen
pivotTable.propertyFunctionHelp = Mit der JavaScript-Funktion können Sie der Pivot-Tabelle <br/> eine neue Eigenschaft hinzufügen, die von den vorhandenen abgeleitet wird. Dies kann hilfreich sein, um die Daten pivotfreundlicher zu gestalten.<br/> Die Funktion übernimmt einen vorhandenen Datensatz und gibt den Wert des neuen Attributs zurück.<br/><br/> Hier ist die Quelle für einen sehr einfachen Abnehmer, der sucht nach einem vorhandenen <br/> -Attribut mit dem Namen <code>Age</code> und gibt das Jahrzehnt zurück, zu dem das Alter gehört:<br/><br/><code> -Funktion (Datensatz) {<br/>&nbsp return record.Age - record.Age % 10;<br/>}</code>
pivotTable.rendererOptions = Renderer-Optionen
pivotTableAggregationEditor = Aggregationsoptions-Editor
pivotTableEdit.aggregationPropertiesRequired = Bitte geben Sie die Aggregationseigenschaften an
pivotTableEdit.aggregationsRequired = Bitte geben Sie Aggregationen an
pivotTableEdit.bandRequired = Band erforderlich
pivotTableEdit.columnsOrRowsRequired = Bitte geben Sie Spalten oder Zeilen an
pivotTableEdit.propertiesRequired = Bitte geben Sie die Eigenschaften an
pivotTableEdit.propertyIntersection = Eigenschaften dürfen sich nicht schneiden
pivotTableEdit.rendererRequired = Bitte geben Sie den Standard-Renderer an
pivotTableEdit.uniqueAggregationOptionCaption =Untertitel für Aggregationsoptionen müssen eindeutig sein
pivotTablePropertyEditor = Editor für Eigenschaftsoptionen
report.bandDetails = Banddetails
report.bands = Berichtsbänder
report.crossParametersValidation = Cross-Parameter-Validierung
report.defaultTemplate = Standard festlegen
report.localeTextHelp = Hier können Sie den Berichtsnamen lokalisieren - zeigen Sie den Namen in der Sprache an, mit der der Benutzer angemeldet ist, in der Berichtsliste. Geben Sie Paare,<br/><code>locale_name = report_name</code>, als separate Zeilen ein.<br/><br/>Zum Beispiel:<br/><code>de = Bücher nach Autor</code><br/><code>ru = Книги по автору</code>
report.nameMsg = Berichtsname nicht angegeben
report.new = Neu
report.parameters = Parameter
report.reportClearButton = Löschen
report.reportFilterButton = Suche
report.reportRunFilterCode = Code
report.reportRunFilterGroup = Gruppe
report.reportRunFilterName = Bezeichnung
report.reportRunFilterUpdatedDate = Aktualisiert nach
report.reportTypeMsg = Berichtstyp nicht angegeben
report.restAccess = Für REST API sichtbar
report.system = System
report.templateMsg = Standard Dateiname nicht angegeben
report.templates = Vorlagen
report.validationScriptOff = Validierungsskript
report.validationScriptOn = Validierungsskript aktiviert
report.valuesFormats = Wert Formate
report.wizard = Assistenten
reportBrowser = Berichte
reportEditor = Bericht bearbeiten
reportEditor.format = Bericht "%s" bearbeiten
reportException.failedConnectToOffice = Konnte OpenOffice nicht finden
reportException.message = Ein Fehler ist während der Berichtgenerierung aufgetreten
reportException.noFile = Datei wurde nicht hochgeladen
reportException.noOpenOfficeFreePorts = Konnte keine Verbindung zu OpenOffice herstellen. Keine freien Ports verfügbar.
reportException.unableToImportReport = Berichtsimport nicht möglich
reportException.wrongFileType = Falscher Dateityp: %s. ZIP erwartet.
reportGroupBrowser = Berichtsgruppen
reportGroupEditor = Berichtsgruppe
roles.addRole = Rolle hinzufügen
roles.removeRole = Rolle löschen
roles.roleName = Rollenname
runReport = Ausführen
runReportBackgroundMessage = Bitte warten, bis das Berichtsdokument erzeugt wird
runReportBackgroundTitle = Bericht wird ausgeführt
screens.createScreen = Maske hinzufügen
screens.removeScreen = Maske löschen
screens.screenId = Masken ID
scriptEditor = Editor
securityFrame.roles = Rollen
securityFrame.screens = Masken
securityTab = Rollen und Masken
template.alterable = Veränderbar
template.code = Vorlagecode
template.codeMsg = Bitte Vorlagecode angeben
template.copyNamingPattern = %s Kopie
template.customDefinedBy = Definiert durch
template.customDefinition = Benutzerdefinierte Definition
template.file = Vorlagedatei
template.freemarkerType = Freemarker Vorlage
template.groovyType = Groovy Vorlage
template.isAlterableOutput = Ist veränderbarer Ausgabe
template.isCustom = Ist benutzerdefiniert
template.namePatternText = Ausgabename Muster
template.namePatternTextHelp = Optional file name pattern, which will be used for the produced report download. It can either be a constant string or contain report parameter as a variable, e.g.: <center><br/><code>${header.authorName}.xlsx</code></center><br/>More sophisticated patterns with several parameters and string concatenation can also be created as a script in any band of report structure, e.g.: <center><br/><code>${Root.title}.xlsx</code></center><br/>where <code>title</code> is a result of the script: <center><br/><code>[['title' : ('Report for ' + params['author'].firstName<br/>+ ' ' + params['author'].lastName)]]</code></center>
template.outputNamePattern = Ausgabe Namensschema
template.outputType = Ausgabetyp
template.outputTypeMsg = Bitte Ausgabeformat angeben
template.typeForHtml = Vorlagentyp
template.uploadTemplate = Bitte Vorlagedatei hochladen
templateEditor = Vorlage bearbeiten
templateEditor.HighlightActiveLine = Hervorheben der aktiven Linie
templateEditor.PrintMargin = Seitenrand drucken
templateEditor.ShowGutter = Zeige Gutter
templateEditor.classRequired = Bitte benutzerdefinierte Definition angeben
templateEditor.clearTemplateMessage = Der Vorlagentext wird beim Speichern gelöscht
templateEditor.customDefinedBy = Bitte benutzerdefinierten Definitionstyp angeben
templateEditor.textHelpGroovy = Hier können Sie ein Groovy-Skript festlegen, mit dem die Vorlage erstellt wird. Die folgenden Variablen werden an das Skript übergeben:<ul><li><code>params</code> - externe Berichtparameter</li><li><code>rootBand</code> - Wurzelband als Objekt des Types <code>BandData</code></li><ul>
templateEditor.titleHelpGroovy = Groovy Vorlage
templateEditor.uploadSuccess = Datei wurde hochgeladen
templateEditor.uploadUnsuccess = Datei wurde nicht hochgeladen
templateEditor.warning = Warnung
templatesTab = Vorlagen
transformationScript = Transformation
unableToDeleteNotEmptyReportGroup = Gruppe mit Berichten kann nicht gelöscht werden
unableToDeleteSystemReportGroup = Systemgruppe mit Berichten kann nicht gelöscht werden
unableToSaveTemplateWhichDefinedWithClass = Vorlage konnte nicht mit angegebener Klasse gespeichert werden
validationScript = Validierungsskript
validationScriptHelp = Hier können Sie ein Groovy-Skript festlegen, das den Wert des Berichtsparameters überprüft.<br/> Die Methode <code>invalid (String str)</ code> kann verwendet werden, um Nachrichten über die Fehler bei der Berichtsvalidierung an den Benutzer zu senden.<br/> Das Skript sollte den Parameterwert überprüfen und die Methode "invalid()" aufrufen, wenn der Wert nicht gültig ist. <br/><br/> Zum Beispiel entspricht <code>invalid('Incorrect parameter')</code> der Nachricht, die im Falle eines ungültigen Parameters für die Berichtsausführung gesendet wird.<br/>Die folgenden Variablen werden an das Skript übergeben:<ul><li><code>value</code> - der vom Benutzer eingegebene Parameterwert</li><li><code>dataManager</code> - ein Objekt des Typs <code>DataManager</code>, der die CRUD-Funktionalität bietet</li><li><code>metadata</code> - ein Objekt vom Typ <Code>Metadata</code>, das den Zugriff auf die Metadaten der Anwendung ermöglicht</li><li><Code><Sicherheit</code> - ein Objekt des Typs <code>Sicherheit</code>, mit dem die Zugriffsrechte des Benutzers auf verschiedene Objekte im System überprüft werden können</li><li><code>userSession</code> - ein Objekt des Typs <code>UserSession</code>, das mit dem aktuell <br>authentifizierten Benutzer</li><li><code>invalid</code> - Groovy Closure, welcher fehlschlägt, wenn sie von innerhalb des Skripts aufgerufen wird.<ul>
valueNameMsg = Wertname nicht angegeben
valuesFormats.format = Format String
valuesFormats.groovyScript = Groovy Skript
valuesFormats.groovyScriptHelpText = HSie können zum Formatieren der Parameter ein Groovy-Skript angeben, das eine Zeichenfolge zurückgibt. Die Variable "value" wird an das Skript übergeben, das mit groovy-Skript formatiert oder konvertiert werden kann.<br/><br/>Beispiel:<br/><code>return "Ergebnis: " + value</code>
valuesFormats.name = Wertname
com.haulmont.reports.gui.report.importdialog/importResult = Import erfolgreich abgeschlossen. Erstellte Berichte %s, aktualisierte %s
com.haulmont.reports.gui.report.importdialog/importRoles = Rollen importieren
com.haulmont.reports.gui.report.importdialog/reportImportDialog.caption = Bericht importieren
com.haulmont.reports.gui.report.importdialog/uploadDescription = Wählen Sie eine Datei aus oder legen Sie sie hier ab.
com.haulmont.reports.gui.report.run/caption.reportForChart = Bericht mit Diagramm
com.haulmont.reports.gui.report.run/caption.reportForPivotTable = Bericht mit Pivot-Tabelle
com.haulmont.reports.gui.report.run/caption.reportForTable = Bericht mit Tabelle
com.haulmont.reports.gui.report.run/caption.reportOutputType = Ausgabetyp
com.haulmont.reports.gui.report.run/caption.reportParameters = Berichtsparameter
com.haulmont.reports.gui.report.run/caption.reportTemplate = Vorlage
com.haulmont.reports.gui.report.run/error.paramIsRequiredButEmpty = Parameter "%s" ausfüllen
com.haulmont.reports.gui.report.run/input.printReport = Bericht ausführen
com.haulmont.reports.gui.report.run/input.requiredParametersNotSet = Benötigter Parameter nicht angegeben
com.haulmont.reports.gui.report.run/inputParameters = Parameter eingeben & Bericht erstellen
com.haulmont.reports.gui.report.run/name = Name
com.haulmont.reports.gui.report.run/reportBrowser = Berichte ausführen
com.haulmont.reports.gui.report.run/runReport = Ausführen
com.haulmont.reports.gui.report.run/showChart.caption = Diagramm
com.haulmont.reports.gui.report.run/showChart.noChartComponent = Die Diagrammkomponente ist nicht in der Anwendung enthalten
com.haulmont.reports.gui.report.run/showPivotTable.caption = Pivot-Tabelle
com.haulmont.reports.gui.report.run/showReportTable.caption = Berichtstabelle anzeigen
com.haulmont.reports.gui.report.validators/fillCorrectOutputFileNameMsg = Das Feld "%s" darf folgende Symbole nicht enthalten: ?\/*<>|:
com.haulmont.reports.gui.report.validators/incorrectBandName = Der Bandname sollte nur Buchstaben, Ziffern und Unterstriche enthalten.
com.haulmont.reports.gui.report.validators/incorrectInputData = Parameter "%s" ist ungültig
com.haulmont.reports.gui.report.validators/incorrectParamAlias = Der Aliasname sollte nur Buchstaben, Ziffern und Unterstrich enthalten.
com.haulmont.reports.gui.report.validators/notOnlyUnderscore = Der Aliasname darf nicht nur aus Unterstrichen bestehen.
com.haulmont.reports.gui.report.wizard/add = Hinzufügen
com.haulmont.reports.gui.report.wizard/addPropertiesAndTableAreas = Einfache oder Tabellen Region dem Bericht hinzufügen
com.haulmont.reports.gui.report.wizard/addRegion = Region hinzufügen
com.haulmont.reports.gui.report.wizard/addRegionsWarn = Fügen Sie min. eine Region zu dem Bericht hinzu
com.haulmont.reports.gui.report.wizard/attributes = Attribute
com.haulmont.reports.gui.report.wizard/backward = Zurück
com.haulmont.reports.gui.report.wizard/cancel = Abbrechen
com.haulmont.reports.gui.report.wizard/changeQuery = Abfrage bearbeiten
com.haulmont.reports.gui.report.wizard/confirmSaveWithoutRegions = Bericht hat keine Bereiche. Soll der Bericht gespeichert werden?
com.haulmont.reports.gui.report.wizard/defaultQueryHasBeenSet = Eine Abfrage ohne Bedingunge wurde gesetzt (alle Einträge werden ausgewählt)
com.haulmont.reports.gui.report.wizard/deleteRegion = Region %s löschen?
com.haulmont.reports.gui.report.wizard/diagramType = Diagrammtyp
com.haulmont.reports.gui.report.wizard/downloadOutputFileNamePattern = Bericht für Entität "%s".%s
com.haulmont.reports.gui.report.wizard/downloadTemplateFile = Vorlage
com.haulmont.reports.gui.report.wizard/downloadTemplateFileNamePattern = Berichtsvorlage für Entität "%s".%s
com.haulmont.reports.gui.report.wizard/elementsAlreadyAdded = Eigenschaften wurden bereits hinzugefügt
com.haulmont.reports.gui.report.wizard/elementsWasNotAdded = Eigenschaften wurden nicht hinzugefügt...
com.haulmont.reports.gui.report.wizard/enterMainParameters = Hauptparameter
com.haulmont.reports.gui.report.wizard/entity = Entität
com.haulmont.reports.gui.report.wizard/entityHintMsg = Objekttyp, der vom Bericht akzeptiert werden
com.haulmont.reports.gui.report.wizard/fillEntityMsg = Bitte "Entität" auswählen
com.haulmont.reports.gui.report.wizard/fillReportNameMsg = Bitte "Berichtsnamen" eingeben
com.haulmont.reports.gui.report.wizard/fillReportQuery = Bitte Berichtsabfrage festlegen
com.haulmont.reports.gui.report.wizard/fillTemplateTypeMsg = Bitte "Vorlage Dateiformat" auswählen
com.haulmont.reports.gui.report.wizard/finishPrepareReport = Nach Beendigung steht der Bericht auf der Berichtmaske zur Verfügung
com.haulmont.reports.gui.report.wizard/forward = Weiter
com.haulmont.reports.gui.report.wizard/interruptConfirm = Soll unterbrochen und alle ungesicherten Daten verworfen werden?
com.haulmont.reports.gui.report.wizard/listOfEntitiesReport = Datensatzliste
com.haulmont.reports.gui.report.wizard/listOfEntitiesReportWithQuery = Datensatzliste per Abfrage
com.haulmont.reports.gui.report.wizard/multiEntityDataSetViewEditor = Attribute für die Datensatzmenge auswählen
com.haulmont.reports.gui.report.wizard/outputFileFormat = Berichts-Ausgabeformat
com.haulmont.reports.gui.report.wizard/outputFileName = Ausgabe Dateiname
com.haulmont.reports.gui.report.wizard/outputFileNameHintMsg = Standard Dateiname des Berichts
com.haulmont.reports.gui.report.wizard/outputFileTypeHintMsg = Dateityp der bei dem Bericht verwendet wird
com.haulmont.reports.gui.report.wizard/properties = Ausgewählte Attribute
com.haulmont.reports.gui.report.wizard/region = Bereich
com.haulmont.reports.gui.report.wizard/regionEditor = Attribute für die Berichtsbereiche
com.haulmont.reports.gui.report.wizard/regionTabulatedMessage = Bericht repräsentiert eine Liste von "%s" Datensätzen mit ausgewählten Attributen
com.haulmont.reports.gui.report.wizard/regionsClearConfirm = Berichtsbereiche werden entfernt. Fortfahren?
com.haulmont.reports.gui.report.wizard/reportBuildType = Berichtstyp
com.haulmont.reports.gui.report.wizard/reportDetails = Berichtserzeugung
com.haulmont.reports.gui.report.wizard/reportName = Berichtsname
com.haulmont.reports.gui.report.wizard/reportNameChanged = Berichtsname wurde bearbeitet
com.haulmont.reports.gui.report.wizard/reportNamePattern = Bericht für Entität "%s"
com.haulmont.reports.gui.report.wizard/reportRegions = Berichtserzeugung
com.haulmont.reports.gui.report.wizard/reportRegionsColumn = Berichtsbereiche
com.haulmont.reports.gui.report.wizard/runReport = Ausführen
com.haulmont.reports.gui.report.wizard/save = Speichern
com.haulmont.reports.gui.report.wizard/saveReport = Bericht speichern
com.haulmont.reports.gui.report.wizard/selectAtLeastOneProp = Fügen Sie Eigenschaften in dem rechten Bereich hinzu, um fohrtzufahren
com.haulmont.reports.gui.report.wizard/selectEntityProperties = "%s" Attribute auswählen, um diese in den Bericht aufzunehmen.
com.haulmont.reports.gui.report.wizard/selectEntityPropertiesForTableArea = "%s" Attribute auswählen, um diese in Tabellenbereich aufzunehmen.
com.haulmont.reports.gui.report.wizard/selectItemForContinue = Einen Eintrag auswählen, um fortzufahren
com.haulmont.reports.gui.report.wizard/selectNotARoot = Einen Eintrag auswählen, um fortzufahren
com.haulmont.reports.gui.report.wizard/selectPropertyFromEntity = Attribut von abhängigen Entitäten auswählen
com.haulmont.reports.gui.report.wizard/setQuery = Abfrage festlegen
com.haulmont.reports.gui.report.wizard/simpleRegion = Einfache Region hinzufügen
com.haulmont.reports.gui.report.wizard/simpleRegionEditor = Attribute für einfache Berichtsregion auswählen
com.haulmont.reports.gui.report.wizard/singleEntityDataSetViewEditor = Attribute für die Datensatzmenge auswählen
com.haulmont.reports.gui.report.wizard/singleEntityReport = Einzelner Datensatz
com.haulmont.reports.gui.report.wizard/singleMultiEntityHintMsg = <b>Bericht für einzelnen Eintrag</b><br/>Sie können den Bericht über den Entitätseditor oder den Entitätsbrowser drucken, indem Sie 1 Entität auswählen.<br/><b>Bericht für Entitätsliste</b><br/>Sie können den Bericht über den Entitätenbrowser drucken und eine Auswahlliste auswählen von Entitäten.<br/><b>Bericht für Liste der Entitäten, die durch Abfrage ausgewählt wurden. </b><br/> Alle Entitäten, die durch eine vordefinierte Abfrage ausgewählt wurden, werden gedruckt.
com.haulmont.reports.gui.report.wizard/stepNo = (Schritt %d von %d)
com.haulmont.reports.gui.report.wizard/tabulatedLookup = Attribut für den Tabellen Berichtsbereich auswählen
com.haulmont.reports.gui.report.wizard/tabulatedRegion = Tabellen Region hinzufügen
com.haulmont.reports.gui.report.wizard/tabulatedRegionEditor = Attribute für Tabellenberichtsbereich
com.haulmont.reports.gui.report.wizard/templateFileFormat = Vorlagetyp
com.haulmont.reports.gui.report.wizard/templateGenerationException = Ein Fehler ist während der Vorlagengenerierung aufgetreten
com.haulmont.reports.gui.report.wizard/templateHintMsg = Auf automatisch generierte Berichtsvorlage verlinken
com.haulmont.reports.gui.report.wizard/templateTypeHintMsg = Vorlagetyp des Berichts
com.haulmont.reports.gui.report.wizard/valueNotFound = Es wurde nichts gefunden
