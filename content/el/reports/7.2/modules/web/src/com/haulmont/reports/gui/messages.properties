<br/> = For example, <code>invalid('Incorrect parameter')</code> corresponds to the message sent in case of an invalid parameter for the report execution.
IDX_REPORT_GROUP_UNIQ_TITLE = A report group with the same title already exists
IDX_REPORT_REPORT_UNIQ_NAME = A report with the same name already exists
actions.ExecutionHistory = Execution history
actions.ListPrintForm = Print reports
actions.Report = Report
actions.RunReport = Run report
actions.printAll = Print all
actions.printSelected = Print selected
bandDefinitionEditor = Band editor
button.import = Import
button.run = Run
caption.category = Category
caption.preview = Preview
chartEdit.invalidJson = Invalid JSON configuration
chartEdit.jsonConfig = JSON configuration
chartEdit.pieJsonConfigHelp = Here you can set an additional JSON configuration for a pie chart.<br/>For example:</br><code>{<br/>&nbsp &nbsp "theme": "dark",<br/>&nbsp &nbsp "backgroundAlpha": 1,<br/>&nbsp &nbsp "backgroundColor": "black",<br/>&nbsp &nbsp "depth3D": 20,<br/>&nbsp &nbsp "angle": 40,<br/>&nbsp &nbsp "colors": [<br/>&nbsp &nbsp &nbsp &nbsp "#0dffdc",<br/>&nbsp &nbsp &nbsp &nbsp "#00c6eb",<br/>&nbsp &nbsp &nbsp &nbsp "#0091ff",<br/>&nbsp &nbsp &nbsp &nbsp "#0c4ae8",<br/>&nbsp &nbsp &nbsp &nbsp "#1111fa"<br/>&nbsp &nbsp ]<br/>}</code></br>Note that this configuration can override the configuration automatically generated from the reporting API.
chartEdit.serialJsonConfigHelp = Here you can set an additional JSON configuration for a serial chart.<br/>For example:</br><code>{<br/>&nbsp &nbsp "theme": "dark",<br/>&nbsp &nbsp "backgroundAlpha": 1,<br/>&nbsp &nbsp "backgroundColor": "black",<br/>&nbsp &nbsp "startDuration": 1,<br/>&nbsp &nbsp "depth3D": 20,<br/>&nbsp &nbsp "angle": 30,<br/>&nbsp &nbsp "graphs": [{<br/>&nbsp &nbsp &nbsp &nbsp "fillAlphas": 1,<br/>&nbsp &nbsp &nbsp &nbsp "lineAlpha": 1,<br/>&nbsp &nbsp &nbsp &nbsp "fillColors": ["#f12711", "#f5af19"],<br/>&nbsp &nbsp &nbsp &nbsp "lineColor": "black",<br/>&nbsp &nbsp &nbsp &nbsp "balloonColor": "#f12711"<br/>&nbsp &nbsp }]<br/>}</code></br>Note that this configuration can override the configuration automatically generated from the reporting API.
chartEdit.series = Series
chartEdit.seriesEmptyMsg = Please specify series
chartEdit.seriesTypeNullMsg = Please specify type for series
chartEdit.seriesValueFieldNullMsg = Please specify value field for series
copy = Copy
crossFieldValidationScriptHelp =   Here you can set a Groovy-script that will cross validate the report parameters before report execution.<br/> The method <code>invalid (String str)</ code> may be used for sending messages about the report validation errors to the user.<br/> The script should check whether or not parameters values make sense in relation to each other and call the "invalid()" method if they do not.<br/><br/> For example, <code>invalid('Start date has to be before end date')</code> corresponds to the message sent in case if "Start date" parameter happens to be after "End date" parameter. <br/>The following variables are passed into the script:<ul><li><code>params</code> - external report parameters map</li><li><code>dataManager</code> - an object of the <code>DataManager</code> type that provides CRUD functionality</li><li><code>metadata</code> - an object of the <code>Metadata</code> type that provides access the application metadata</li><li><code>security</code> - an object of the <code>Security</code> type used to check user access rights to different<br>objects in the system</li><li><code>userSession</code> - an object of the <code>UserSession</code> type associated with the currently<br>authenticated user</li><li><code>invalid</code> - groovy closure which effectively fails validation if called from inside the script<ul>
dataSet.cantFindCollectionProperty = Can`t find collection property %s for entity %s
dataSet.dataStore = Data store
dataSet.dataStoreMain = Main
dataSet.editView = Select entity attributes
dataSet.entitiesParamName = List of entities parameter name
dataSet.entityAliasInvalid = Parameter with name [%s] is incorrect
dataSet.entityAliasNull = Parameter is empty
dataSet.entityParamName = Entity parameter name
dataSet.entityWasChanged = Entity was changed. Now you are editing available fields for a new entity %s
dataSet.fullScreen = Full screen
dataSet.jsonParameter = Parameter
dataSet.jsonPathQuery = JSON path query
dataSet.jsonPathQueryHelp = Here you can set JSON path query to query the JSON tree.<p>Example:</p>Having the following JSON structure, we can select all books with the the query <strong>$.store.book[*]</strong><br><code>{<br>&nbsp "store": {<br>&nbsp &nbsp "book": [<br>&nbsp &nbsp &nbsp {<br>&nbsp &nbsp &nbsp &nbsp "category": "reference",<br>&nbsp &nbsp &nbsp &nbsp "author": "Nigel Rees",<br>&nbsp &nbsp &nbsp &nbsp "title": "Sayings of the Century",<br>&nbsp &nbsp &nbsp &nbsp "price": 8.95<br>&nbsp &nbsp &nbsp },<br>&nbsp &nbsp &nbsp {<br>&nbsp &nbsp &nbsp &nbsp "category": "fiction",<br>&nbsp &nbsp &nbsp &nbsp "author": "Evelyn Waugh",<br>&nbsp &nbsp &nbsp &nbsp "title": "Sword of Honour",<br>&nbsp &nbsp &nbsp &nbsp "price": 12.99,<br>&nbsp &nbsp &nbsp &nbsp "isbn": "0-553-21311-3"<br>&nbsp &nbsp &nbsp }<br>&nbsp &nbsp ],<br>&nbsp &nbsp "bicycle": {<br>&nbsp &nbsp &nbsp "color": "red",<br>&nbsp &nbsp &nbsp "price": 19.95<br>&nbsp &nbsp }<br>&nbsp }<br>}<br></code><br>For more sophisticated examples please refer for JSON path documentation.
dataSet.jsonPathQueryText = JSON path query is required
dataSet.jsonSourceGroovyCodeHelp = Here you can set a Groovy script that will return the string containing JSON. The following variables are passed into the script:<ul><li><code>params</code> - external report parameters map</li><li><code>parentBand</code> - parent band as an object of the <code>BandData</code> type</li><li><code>persistence</code> - an object of the <code>Persistence</code> type that provides access to the data storage</li><li><code>dataManager</code> - an object of the <code>DataManager</code> type that provides CRUD functionality</li><li><code>metadata</code> - an object of the <code>Metadata</code> type that provides access the application metadata</li><li><code>security</code> - an object of the <code>Security</code> type used to check user access rights to different<br>objects in the system</li><li><code>userSession</code> - an object of the <code>UserSession</code> type associated with the currently<br>authenticated user</li><li><code>userSessionSource</code> - an object of the <code>UserSessionSource</code> type which is used to obtain</br>current user session object</li><li><code>timeSource</code> - an object of the <code>TimeSource</code> type used to obtain the current time</li><li><code>transactional</code> - a method that takes a closure, which should be executed in a new transaction,<br>as parameter. The current <code>EntityManager</code> becomes the closure parameter</li><ul>
dataSet.jsonSourceType = JSON source
dataSet.linkParameterName = Link field
dataSet.name = Dataset name
dataSet.processTemplate = Preprocess query as Groovy template
dataSet.text = Script
dataSet.textHelp = Here you can set a Groovy script that will produce the dataset. The following variables are passed into the script:<ul><li><code>params</code> - external report parameters map</li><li><code>parentBand</code> - parent band as an object of the <code>BandData</code> type</li><li><code>persistence</code> - an object of the <code>Persistence</code> type that provides access to the data storage</li><li><code>dataManager</code> - an object of the <code>DataManager</code> type that provides CRUD functionality</li><li><code>metadata</code> - an object of the <code>Metadata</code> type that provides access the application metadata</li><li><code>security</code> - an object of the <code>Security</code> type used to check user access rights to different<br>objects in the system</li><li><code>userSession</code> - an object of the <code>UserSession</code> type associated with the currently<br>authenticated user</li><li><code>userSessionSource</code> - an object of the <code>UserSessionSource</code> type which is used to obtain</br>current user session object</li><li><code>timeSource</code> - an object of the <code>TimeSource</code> type used to obtain the current time</li><li><code>transactional</code> - a method that takes a closure, which should be executed in a new transaction,<br>as parameter. The current <code>EntityManager</code> becomes the closure parameter</li><ul>
dataSet.type = Dataset type
dataSet.urlJsonSource = URL
dataSet.urlJsonSourceMessage = URL is required
dataSet.useExistingView = Use existing view
dataSet.viewName = View name
definition.name = Band Name
definition.orientation = Orientation
definition.parentBand = Parent Band
description.createBand = Create band
description.createDataSet = Create data set
description.createTemplate = Create template
description.downloadTemplate = Download template
description.editTemplate = Edit template
description.moveDown = Move down
description.moveUp = Move up
description.removeBand = Remove band
description.removeDataSet = Remove data set
description.uploadTemplate = Upload template
duration.format.onlySeconds = %s sec
duration.format.withHours = %s h %s min %s sec
duration.format.withMinutes = %s min %s sec
error.bandNameNull = Band name is not set
error.bandNamesDuplicated = Band's name duplicated [%s]
error.bandOrientationNull = Band's [%s] orientation is not set
error.dataSetNameNull = Data set name is not set
error.dataSetScriptNull = Data set's [%s] script is empty
error.dataSetTypeNull = Data set's [%s] type is not set
error.jsonDataSetScriptNull = JSON data set's [%s] script is empty
error.rootBandNull = Root band is not set
export = Export
fileUploadDialog.caption = Sending the file
formatStringMsg = Format string isn't specified
formatsEdit = Formatter
generalFrame.createBandDefinition = Create band
generalFrame.down = Down
generalFrame.removeBandDefinition = Remove band
generalFrame.up = Up
generalTab = Report structure
groovyScriptMsg = Groovy-script isn't specified
groupLocaleCaption = Localization
groupProperties = Group
inputOutputTypesError = Template type and output type are incompatible
inputParameters = Input entity parameters
localeCaption = Localized name
localeText = Localization
localesTab = Localization
menu-config.report$Report.browse = Reports
menu-config.report$Report.run = Run Reports
menu-config.report$ReportGroup.browse = Report Groups
menu-config.report$showChart = Show Charts
menu-config.report$showPivotTable = Show Pivot Tables
menu-config.report$showReportTable = Show Tables
menu-config.reports = Reports
notification.defaultTemplateIsEmpty = Default template isn't specified
notification.fileIsNotAllowedForSpecificTypes = Unable to save template file for chart/table/pivot table 
notification.selectReport = Please select a report
notifications.confirmPrintAll = Are you sure you want to print all the data?
notifications.confirmPrintAllheader = Confirmation
notifications.confirmPrintSelected = Which data should be used for report?
notifications.confirmPrintSelectedheader = Select
notifications.noSelectedEntity = No data selected
parameter.localeTextHelp = Here you can define the parameter name for different locales. In order to do this<br/>you should enter the pairs <code>locale_name = report_name</code>.<br/><br/> For example:<br/><code>en = Book</code><br/><code>ru = Книга</code>
parameter.transformationScriptHelp = Allows you to apply a Groovy script on the parameter before using it in the<br/>report. A Groovy script should return new parameter value. Current parameter<br/>value is available in the script by the <code>paramValue</code>, the parameters map is<br/>available by alias <code>params</code>.<br/><br/>For example:<br/><code>return "%" + paramValue + "%"</code>
parameterEditor = Parameter editor
parameters.alias = Parameter alias
parameters.aliasMsg = Parameter alias isn't specified
parameters.caption = Caption
parameters.crossFieldValidate = Validate
parameters.defaultDateIsCurrent = Default date(time)\nis current
parameters.defaultValue = Default value
parameters.enum = Enumeration
parameters.groovyScript = Groovy script
parameters.hidden = Hidden
parameters.localesTab = Localization
parameters.lookup = Lookup picker field
parameters.lookupHelp = Adds the ability to select parameter values from the drop-down list. You can configure where and join restrictions for the list on "Lookup settings" tab.
parameters.lookupJoin = Join clause
parameters.lookupJoinHelp = A value of this field is added to the "from" query clause. It should begin with a comma, "join" or "left join".<br/>The {E} placeholder should be used as an alias of the entity being extracted. On execution of the query, it will be replaced with a real alias, specified in the query.<br/><br/>For example:<br/><code>join {E}.seller s</code>
parameters.lookupSettingsTab = Lookup settings
parameters.lookupWhere = Where clause
parameters.lookupWhereHelp = A value of this field is added to the "where" query clause using "and" condition. The "where" word is not needed, as it will be added automatically.<br/>The {E} placeholder should be used as an alias of the entity being extracted. On execution of the query, it will be replaced with a real alias, specified in the query.<br/><br/>For example:<br/><code>{E}.salary > 1000 and {E}.department = 'abc'</code>
parameters.metaClass = Entity
parameters.nameMsg = Parameter name isn't specified
parameters.optionsTab = Properties
parameters.predefinedTransformation = Predefined transformation
parameters.required = Required parameter?
parameters.requiredEnumClass = Parameter enumeration isn't specified
parameters.requiredMetaClass = Parameter entity isn't specified
parameters.screen = Entity selection screen
parameters.transformationTab = Transformation
parameters.type = Parameter type
parameters.typeMsg = Parameter type isn't specified
parameters.validateFields = Validate
parameters.validationTab = Validation
parameters.wildcards = Wildcards
parametersAndFormatsTab = Parameters and Formats
pivotTable.aggregationFunctionHelp = JavaScript function can be used as your own aggregation function.<br/>It should be a function which gets called once per cell in the pivot table and returns<br/>an object with the following keys:<ul><li><code>push</code> - a function which takes a record from the input, this function is called<br/>once per record</li><li><code>value</code> - a function which returns the value to be stored in the cell</li><li><code>format</code> - a function which takes a value and returns its formatted string<br/>representation</li></ul>Here is an example aggregator <code>count</code> which will just return the number of records that match the cell:<br/><br/><code>function(data, rowKey, colKey) {<br/>&nbsp &nbsp return {<br/>&nbsp &nbsp &nbsp &nbsp count: 0,<br/>&nbsp &nbsp &nbsp &nbsp push: function(record) { this.count++; },<br/>&nbsp &nbsp &nbsp &nbsp value: function() { return this.count; },<br/>&nbsp &nbsp &nbsp &nbsp format: function(x) { return x; },<br/>&nbsp &nbsp};<br/>}</code>
pivotTable.aggregationOptions = Aggregation options
pivotTable.customC3properties = Custom C3 properties
pivotTable.customFunctions = Custom functions
pivotTable.customHeatmapProperties = Custom heatmap properties
pivotTable.customOptions = Custom options
pivotTable.defaultAggregation = Default aggregation
pivotTable.functionHelpCaption = Script
pivotTable.propertiesOptions = Properties options
pivotTable.propertyFunctionHelp = JavaScript function can be used to add new property to the pivot table<br/>which is derived from the existing ones. This can be useful to make the data more pivot-friendly.<br/>The function takes an existing record and returns the value of the new attribute.<br/><br/>Here is the source for a very simple deriver which will look for an existing<br/>attribute called <code>Age</code> and return the decade that age belongs to:<br/><br/><code>function(record) {<br/>&nbsp &nbsp return record.Age - record.Age % 10;<br/>}</code>
pivotTable.rendererOptions = Renderer options
pivotTableAggregationEditor = Aggregation option editor
pivotTableEdit.aggregationPropertiesRequired = Please specify aggregation properties
pivotTableEdit.aggregationsRequired = Please specify aggregations
pivotTableEdit.bandRequired = Band required
pivotTableEdit.columnsOrRowsRequired = Please specify columns or rows
pivotTableEdit.propertiesRequired = Please specify properties
pivotTableEdit.propertyIntersection = Properties must not intersect
pivotTableEdit.rendererRequired = Please specify default renderer
pivotTableEdit.uniqueAggregationOptionCaption = Aggregation option caption must be unique
pivotTablePropertyEditor = Property option editor
report.bandDetails = Band Details
report.bands = Report Bands
report.browser.showExecutions = Execution history
report.crossParametersValidation = Cross parameters validation
report.defaultTemplate = Set default
report.executionHistory.byReport = Execution history of "%s"
report.executionHistory.caption = Execution history
report.executionHistory.download = Download document
report.localeTextHelp = Here you can localize the report name - show the name in the language, which<br/>the user is logged in with, in the report list. Enter pairs,<br/><code>locale_name = report_name</code>, as separate lines.<br/><br/> For example:<br/><code>en = Books by author</code><br/><code>ru = Книги по автору</code>
report.nameMsg = Report name isn't specified
report.new = New
report.parameters = Parameters
report.reportClearButton = Clear
report.reportFilterButton = Search
report.reportRunFilterCode = Code
report.reportRunFilterGroup = Group
report.reportRunFilterName = Name
report.reportRunFilterUpdatedDate = Updated After
report.reportTypeMsg = Report type isn't specified
report.restAccess = Visible for REST API
report.system = System
report.templateMsg = Default template isn't specified
report.templates = Templates
report.validationScriptOff = Validation script
report.validationScriptOn = Validation script enabled
report.valuesFormats = Value formats
report.wizard = Using wizard
reportBrowser = Reports
reportEditor = Report editor
reportEditor.format = Edit report "%s"
reportException.failedConnectToOffice = Couldn't find LibreOffice instance
reportException.message = An error occurred while generating report
reportException.noFile = File was not uploaded
reportException.noOpenOfficeFreePorts = Couldn't connect to LibreOffice instance. No free ports available.
reportException.unableToImportReport = Unable to import reports
reportException.wrongFileType = Wrong file type: %s. Expecting ZIP.
reportGroupBrowser = Report Groups
reportGroupEditor = Report Group
roles.addRole = Add role
roles.removeRole = Remove role
roles.roleName = Role name
runReport = Run
runReportBackgroundMessage = Please wait while the report document is being generated
runReportBackgroundTitle = Running Report
screens.createScreen = Add screen
screens.removeScreen = Remove screen
screens.screenId = Screen Id
scriptEditor = Editor
scriptEditorDialog.captionFormat = Script editor for %s > %s
securityFrame.roles = Roles
securityFrame.screens = Screens
securityTab = Roles and Screens
template.alterable = Alterable
template.band = Band
template.bandRequired = Please select a band
template.bandTableOrColumnTableRequired = The column table or band table has empty fields
template.code = Template code
template.codeMsg = Please specify template code
template.column = Column
template.columnName = Column Name
template.copyNamingPattern = %s copy
template.customDefinedBy = Defined by
template.customDefinition = Custom definition
template.file = Template file
template.freemarkerType = Freemarker template
template.groovyType = Groovy template
template.isAlterableOutput = Is alterable output
template.isCustom = Is custom
template.namePatternText = Output name pattern
template.namePatternTextHelp = Optional file name pattern, which will be used for the produced report download. It can either be a constant string or contain report parameter as a variable, e.g.: <center><br/><code>${header.authorName}.xlsx</code></center><br/>More sophisticated patterns with several parameters and string concatenation can also be created as a script in any band of report structure, e.g.: <center><br/><code>${Root.title}.xlsx</code></center><br/>where <code>title</code> is a result of the script: <center><br/><code>[['title' : ('Report for ' + params['author'].firstName<br/>+ ' ' + params['author'].lastName)]]</code></center>
template.outputNamePattern = Output name pattern
template.outputType = Output type
template.outputTypeMsg = Please specify output type
template.tableParameters = Table parameters
template.typeForHtml = Template type
template.uploadTemplate = Please upload template file
templateEditor = Template editor
templateEditor.HighlightActiveLine = Highlight Active Line
templateEditor.PrintMargin = Print Margin
templateEditor.ShowGutter = Show Gutter
templateEditor.classRequired = Please specify custom definition
templateEditor.clearTemplateMessage = Template text will be deleted on save
templateEditor.customDefinedBy = Please specify custom definition type
templateEditor.textHelpGroovy = Here you can set a Groovy script that will produce the template. The following variables are passed into the script:<ul><li><code>params</code> - external report parameters</li><li><code>rootBand</code> - root band as an object of the <code>BandData</code> type</li><ul>
templateEditor.titleHelpGroovy = Groovy template
templateEditor.uploadSuccess = File was uploaded
templateEditor.uploadUnsuccess = File was not uploaded
templateEditor.warning = Warning
templatesTab = Templates
transformationScript = Transformation
unableToDeleteNotEmptyReportGroup = Unable to delete group with reports
unableToDeleteSystemReportGroup = Unable to delete system group of reports
unableToSaveTemplateWhichDefinedWithClass = Unable to save template which defined with class
validationScript = Validation Script
validationScriptHelp =   Here you can set a Groovy-script that will check the report parameter value.<br/> The method <code>invalid (String str)</ code> may be used for sending messages about the report validation errors to the user.<br/> The script should check the parameter value and call the "invalid()" method if the value is not valid.<br/><br/> For example, <code>invalid('Incorrect parameter')</code> corresponds to the message sent in case of an invalid parameter for the report execution.<br/>The following variables are passed into the script:<ul><li><code>value</code> - the parameter value entered by the user</li><li><code>dataManager</code> - an object of the <code>DataManager</code> type that provides CRUD functionality</li><li><code>metadata</code> - an object of the <code>Metadata</code> type that provides access the application metadata</li><li><code>security</code> - an object of the <code>Security</code> type used to check user access rights to different<br>objects in the system</li><li><code>userSession</code> - an object of the <code>UserSession</code> type associated with the currently<br>authenticated user</li><li><code>invalid</code> - groovy closure which effectively fails validation if called from inside the script<ul>
valueNameMsg = Value name isn't specified
valuesFormats.format = Format string
valuesFormats.groovyScript = Groovy script
valuesFormats.groovyScriptHelpText = Here you can specify a Groovy script to format the parameters, which returns a string. The variable "value" is passed to the script, which can be formatted or converted using groovy-script.<br/><br/>Example:<br/><code>return "Result: " + value</code>
valuesFormats.name = Value name
com.haulmont.reports.gui.report.importdialog/importResult = Import successfully completed. Created reports %s, updated %s
com.haulmont.reports.gui.report.importdialog/importRoles = Import roles
com.haulmont.reports.gui.report.importdialog/reportImportDialog.caption = Import report
com.haulmont.reports.gui.report.importdialog/uploadDescription = Select a file or drop it here
com.haulmont.reports.gui.report.run/caption.reportForChart = Report with a chart
com.haulmont.reports.gui.report.run/caption.reportForPivotTable = Report for pivot table
com.haulmont.reports.gui.report.run/caption.reportForTable = Report with a table
com.haulmont.reports.gui.report.run/caption.reportOutputType = Output type
com.haulmont.reports.gui.report.run/caption.reportParameters = Report parameters
com.haulmont.reports.gui.report.run/caption.reportTemplate = Template
com.haulmont.reports.gui.report.run/error.paramIsRequiredButEmpty = Fill in parameter "%s"
com.haulmont.reports.gui.report.run/input.printReport = Run report
com.haulmont.reports.gui.report.run/input.requiredParametersNotSet = Required parameter not defined
com.haulmont.reports.gui.report.run/inputParameters = Input parameters & run report
com.haulmont.reports.gui.report.run/name = Name
com.haulmont.reports.gui.report.run/reportBrowser = Run Reports
com.haulmont.reports.gui.report.run/runReport = Run
com.haulmont.reports.gui.report.run/showChart.caption = Report Chart
com.haulmont.reports.gui.report.run/showChart.noChartComponent = Charts component is not included in the application
com.haulmont.reports.gui.report.run/showPivotTable.caption = Pivot table
com.haulmont.reports.gui.report.run/showReportTable.caption = Show Report Table
com.haulmont.reports.gui.report.validators/fillCorrectOutputFileNameMsg = The "%s" field must not contain: ?\/*<>|:
com.haulmont.reports.gui.report.validators/incorrectBandName = Band name should contains only letters, digits and underscore symbol
com.haulmont.reports.gui.report.validators/incorrectInputData = Parameter "%s" is not valid
com.haulmont.reports.gui.report.validators/incorrectParamAlias = Alias name should contains only letters, digits and underscore symbol
com.haulmont.reports.gui.report.validators/notOnlyUnderscore = Alias name should not contain only underscore symbol
com.haulmont.reports.gui.report.wizard/add = Add
com.haulmont.reports.gui.report.wizard/addPropertiesAndTableAreas = Add simple or table region to the report
com.haulmont.reports.gui.report.wizard/addRegion = Add region
com.haulmont.reports.gui.report.wizard/addRegionsWarn = Add at least one region to the report
com.haulmont.reports.gui.report.wizard/attributes = Attributes
com.haulmont.reports.gui.report.wizard/backward = Back
com.haulmont.reports.gui.report.wizard/cancel = Cancel
com.haulmont.reports.gui.report.wizard/changeQuery = Change query
com.haulmont.reports.gui.report.wizard/confirmSaveWithoutRegions = Report doesn't have any regions. Do you want to save it?
com.haulmont.reports.gui.report.wizard/defaultQueryHasBeenSet = A query without conditions has been set (selecting all entities)
com.haulmont.reports.gui.report.wizard/deleteRegion = Delete region %s?
com.haulmont.reports.gui.report.wizard/diagramType = Diagram type
com.haulmont.reports.gui.report.wizard/downloadOutputFileNamePattern = Report for entity "%s".%s
com.haulmont.reports.gui.report.wizard/downloadTemplateFile = Template
com.haulmont.reports.gui.report.wizard/downloadTemplateFileNamePattern = Template for report "%s".%s
com.haulmont.reports.gui.report.wizard/elementsAlreadyAdded = Properties have been already added
com.haulmont.reports.gui.report.wizard/elementsWasNotAdded = Properties have not been added...
com.haulmont.reports.gui.report.wizard/enterMainParameters = Enter main parameters
com.haulmont.reports.gui.report.wizard/entity = Entity
com.haulmont.reports.gui.report.wizard/entityHintMsg = Type of object accepted by the report
com.haulmont.reports.gui.report.wizard/fillEntityMsg = Please select "Entity"
com.haulmont.reports.gui.report.wizard/fillReportNameMsg = Please input "Report name"
com.haulmont.reports.gui.report.wizard/fillReportQuery = Please set the report query
com.haulmont.reports.gui.report.wizard/fillTemplateTypeMsg = Please select "Template file format"
com.haulmont.reports.gui.report.wizard/finishPrepareReport = After finish you will be able to find the report on "Reports" screen
com.haulmont.reports.gui.report.wizard/forward = Next
com.haulmont.reports.gui.report.wizard/interruptConfirm = Do you want to interrupt and discard unsaved changes?
com.haulmont.reports.gui.report.wizard/listOfEntitiesReport = Report for list of entities
com.haulmont.reports.gui.report.wizard/listOfEntitiesReportWithQuery = Report for list of entities, selected by query
com.haulmont.reports.gui.report.wizard/multiEntityDataSetViewEditor = Select attributes for the data set
com.haulmont.reports.gui.report.wizard/outputFileFormat = Report output type
com.haulmont.reports.gui.report.wizard/outputFileName = Output name pattern
com.haulmont.reports.gui.report.wizard/outputFileNameHintMsg = Default name for the file generated by the report
com.haulmont.reports.gui.report.wizard/outputFileTypeHintMsg = Type of the file generated by the report
com.haulmont.reports.gui.report.wizard/properties = Selected attributes
com.haulmont.reports.gui.report.wizard/region = Region
com.haulmont.reports.gui.report.wizard/regionEditor = Select attributes for the report region
com.haulmont.reports.gui.report.wizard/regionTabulatedMessage = Report represents the list of "%s" entities with selected attributes
com.haulmont.reports.gui.report.wizard/regionsClearConfirm = Report regions will be cleared. Continue?
com.haulmont.reports.gui.report.wizard/reportBuildType = Report type
com.haulmont.reports.gui.report.wizard/reportDetails = Report creation
com.haulmont.reports.gui.report.wizard/reportName = Report name
com.haulmont.reports.gui.report.wizard/reportNameChanged = Report name has been changed
com.haulmont.reports.gui.report.wizard/reportNamePattern = Report for entity "%s"
com.haulmont.reports.gui.report.wizard/reportRegions = Report creation
com.haulmont.reports.gui.report.wizard/reportRegionsColumn = Report regions
com.haulmont.reports.gui.report.wizard/runReport = Run
com.haulmont.reports.gui.report.wizard/save = Save
com.haulmont.reports.gui.report.wizard/saveReport = Save report
com.haulmont.reports.gui.report.wizard/selectAtLeastOneProp = Add properties to the right panel to continue
com.haulmont.reports.gui.report.wizard/selectEntityProperties = Select "%s" attributes to include to the report.<br>For a chart and table, the first attribute value will be taken as a caption,<br>other attributes will be taken as data.
com.haulmont.reports.gui.report.wizard/selectEntityPropertiesForTableArea = Select "%s" attributes to include to the table region.<br>For a chart and table, the first attribute value will be taken as a caption,<br>other attributes will be taken as data.
com.haulmont.reports.gui.report.wizard/selectItemForContinue = Select an item to continue
com.haulmont.reports.gui.report.wizard/selectNotARoot = Select a child item to continue
com.haulmont.reports.gui.report.wizard/selectPropertyFromEntity = Select property from related entity
com.haulmont.reports.gui.report.wizard/setQuery = Set query
com.haulmont.reports.gui.report.wizard/simpleRegion = Add simple region
com.haulmont.reports.gui.report.wizard/simpleRegionEditor = Select attributes for the simple report region
com.haulmont.reports.gui.report.wizard/singleEntityDataSetViewEditor = Select attributes for the data set
com.haulmont.reports.gui.report.wizard/singleEntityReport = Report for single entity
com.haulmont.reports.gui.report.wizard/singleMultiEntityHintMsg = <b>Report for single entity</b><br/>You can print the report from the entity editor or the entities browser, selecting 1 entity.<br/><b>Report for list of entities</b><br/>You can print the report from the entities browser, selecting list of entities.<br/><b>Report for list of entities, selected by query</b><br/>All entities selected by pre-defined query will be printed.
com.haulmont.reports.gui.report.wizard/stepNo = (Step %d of %d)
com.haulmont.reports.gui.report.wizard/tabulatedLookup = Select attribute for the tabulated report region
com.haulmont.reports.gui.report.wizard/tabulatedRegion = Add tabulated region
com.haulmont.reports.gui.report.wizard/tabulatedRegionEditor = Select attributes for the tabulated report region
com.haulmont.reports.gui.report.wizard/templateFileFormat = Template type
com.haulmont.reports.gui.report.wizard/templateGenerationException = An error occurred during template generation
com.haulmont.reports.gui.report.wizard/templateHintMsg = Link to the auto-generated report template
com.haulmont.reports.gui.report.wizard/templateTypeHintMsg = The report template's type
com.haulmont.reports.gui.report.wizard/valueNotFound = Nothing has been found
